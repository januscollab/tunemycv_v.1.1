
import React, { useState } from 'react';
import { Eye, Calendar, Building, Trash2, FileText, MessageSquare, Edit2 } from 'lucide-react';
import DownloadOptions from '@/components/cover-letter/DownloadOptions';
import EditTitleDialog from '@/components/ui/edit-title-dialog';
import DeleteConfirmationDialog from '@/components/ui/delete-confirmation-dialog';

interface AnalysisResult {
  id: string;
  job_title: string;
  company_name: string;
  compatibility_score: number;
  created_at: string;
  executive_summary: string;
  strengths: string[];
  weaknesses: string[];
  recommendations: string[];
  credit_cost?: number;
  has_cover_letter?: boolean;
}

interface AnalysisListItemProps {
  analysis: AnalysisResult;
  onViewDetails: (analysis: AnalysisResult) => void;
  onDelete: (analysisId: string) => void;
  onCreateCoverLetter: (analysis: AnalysisResult) => void;
  onInterviewPrep: (analysis: AnalysisResult) => void;
  onEditTitle?: (analysisId: string, newTitle: string) => void;
}

const AnalysisListItem: React.FC<AnalysisListItemProps> = ({ 
  analysis, 
  onViewDetails, 
  onDelete, 
  onCreateCoverLetter, 
  onInterviewPrep,
  onEditTitle 
}) => {
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  
  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    setIsDeleteDialogOpen(true);
  };

  const confirmDelete = () => {
    onDelete(analysis.id);
  };

  const handleCoverLetter = (e: React.MouseEvent) => {
    e.stopPropagation();
    onCreateCoverLetter(analysis);
  };

  const handleInterviewPrep = (e: React.MouseEvent) => {
    e.stopPropagation();
    onInterviewPrep(analysis);
  };

  const handleView = (e: React.MouseEvent) => {
    e.stopPropagation();
    onViewDetails(analysis);
  };

  // Create analysis content for download
  const analysisContent = `
CV ANALYSIS REPORT
==================

Job Title: ${analysis.job_title || 'Untitled Position'}
Company: ${analysis.company_name || 'Company not specified'}
Compatibility Score: ${analysis.compatibility_score}%
Date: ${new Date(analysis.created_at).toLocaleDateString()}

EXECUTIVE SUMMARY
================
${analysis.executive_summary}

STRENGTHS
=========
${analysis.strengths.map((strength, index) => `${index + 1}. ${strength}`).join('\n')}

AREAS FOR IMPROVEMENT
====================
${analysis.weaknesses.map((weakness, index) => `${index + 1}. ${weakness}`).join('\n')}

RECOMMENDATIONS
===============
${analysis.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}

Generated by TuneMyCV
  `.trim();

  const fileName = `CV_Analysis_${analysis.job_title?.replace(/[^a-zA-Z0-9\s]/g, '_') || 'Report'}_${new Date().toISOString().split('T')[0]}`;

  const hasInterviewPrep = false;

  return (
    <div className="bg-white border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow hover:border-zapier-orange/50 relative">
      <div className="flex justify-between items-start">
        <div className="flex-1 pr-4">
          <div className="flex items-center space-x-3 mb-2">
            <h3 className="text-lg font-medium text-slate-900">
              {analysis.job_title || 'Untitled Position'}
            </h3>
            {onEditTitle && (
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  setIsEditDialogOpen(true);
                }}
                className="text-slate-400 hover:text-zapier-orange transition-colors"
                title="Edit title"
              >
                <Edit2 className="h-3 w-3" />
              </button>
            )}
            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
              {analysis.compatibility_score}% match
            </span>
          </div>
          
          <div className="flex items-center text-sm text-slate-600 mb-3">
            <Building className="h-4 w-4 mr-1" />
            <span>{analysis.company_name || 'Company not specified'}</span>
            <span className="mx-2">â€¢</span>
            <Calendar className="h-4 w-4 mr-1" />
            <span>{new Date(analysis.created_at).toLocaleDateString()} at {new Date(analysis.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
          </div>
        </div>
        
      </div>
      
      {/* Action buttons row at bottom */}
      <div className="flex items-center justify-between mt-3 pt-2 border-t border-slate-100">
        <div className="flex items-center space-x-3">
          <button
            onClick={handleView}
            className="flex items-center px-2 py-1 text-xs text-black hover:text-black transition-colors menu-text-animation"
          >
            <Eye className="h-3 w-3 mr-1 text-black" />
            View
          </button>
          
          <DownloadOptions
            content={analysisContent}
            fileName={fileName}
            triggerComponent={
              <button className="flex items-center px-2 py-1 text-xs text-black hover:text-black hover:bg-black/10 rounded-md transition-colors menu-text-animation">
                <FileText className="h-3 w-3 mr-1 text-black" />
                Download
              </button>
            }
          />
          
          <button
            onClick={handleCoverLetter}
            className={`flex items-center px-2 py-1 text-xs rounded-md transition-colors menu-text-animation ${
              analysis.has_cover_letter
                ? 'text-blue-600 hover:text-blue-700 hover:bg-blue-50'
                : 'text-black hover:text-black hover:bg-black/10'
            }`}
          >
            <FileText className={`h-3 w-3 mr-1 ${analysis.has_cover_letter ? 'text-blue-600' : 'text-black'}`} />
            {analysis.has_cover_letter ? 'View Cover Letter' : 'Generate Cover Letter'}
          </button>
          
          <button
            onClick={handleInterviewPrep}
            className="flex items-center px-2 py-1 text-xs text-black hover:text-black hover:bg-black/10 rounded-md transition-colors menu-text-animation"
          >
            <MessageSquare className="h-3 w-3 mr-1 text-black" />
            {hasInterviewPrep ? 'Review Interview Prep' : 'Create Interview Prep'}
          </button>
        </div>
        
        {/* Delete button in bottom right */}
        <button
          onClick={handleDelete}
          className="p-1 text-xs text-red-600 hover:text-zapier-orange transition-colors menu-text-animation"
        >
          <Trash2 className="h-4 w-4" />
        </button>
      </div>

      <EditTitleDialog
        isOpen={isEditDialogOpen}
        onClose={() => setIsEditDialogOpen(false)}
        onSave={(newTitle) => {
          if (onEditTitle) {
            onEditTitle(analysis.id, newTitle);
          }
        }}
        currentTitle={analysis.job_title || ''}
        titleType="analysis"
      />

      <DeleteConfirmationDialog
        isOpen={isDeleteDialogOpen}
        onClose={() => setIsDeleteDialogOpen(false)}
        onConfirm={confirmDelete}
        title="Delete Analysis"
        description="Are you sure you want to delete this CV analysis? This action cannot be undone and will permanently remove all associated data."
      />
    </div>
  );
};

export default AnalysisListItem;
