
import React from 'react';
import { Eye, Calendar, Building, Trash2, FileText, MessageSquare, Download } from 'lucide-react';

interface AnalysisResult {
  id: string;
  job_title: string;
  company_name: string;
  compatibility_score: number;
  created_at: string;
  executive_summary: string;
  strengths: string[];
  weaknesses: string[];
  recommendations: string[];
  credit_cost?: number;
}

interface AnalysisListItemProps {
  analysis: AnalysisResult;
  onViewDetails: (analysis: AnalysisResult) => void;
  onDelete: (analysisId: string) => void;
  onCreateCoverLetter: (analysis: AnalysisResult) => void;
  onInterviewPrep: (analysis: AnalysisResult) => void;
}

const AnalysisListItem: React.FC<AnalysisListItemProps> = ({ 
  analysis, 
  onViewDetails, 
  onDelete, 
  onCreateCoverLetter, 
  onInterviewPrep 
}) => {
  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (window.confirm('Are you sure you want to delete this analysis?')) {
      onDelete(analysis.id);
    }
  };

  const handleCoverLetter = (e: React.MouseEvent) => {
    e.stopPropagation();
    onCreateCoverLetter(analysis);
  };

  const handleInterviewPrep = (e: React.MouseEvent) => {
    e.stopPropagation();
    onInterviewPrep(analysis);
  };

  const handleView = (e: React.MouseEvent) => {
    e.stopPropagation();
    onViewDetails(analysis);
  };

  const handleDownload = (e: React.MouseEvent) => {
    e.stopPropagation();
    
    // Create analysis content
    const analysisContent = `
CV ANALYSIS REPORT
==================

Job Title: ${analysis.job_title || 'Untitled Position'}
Company: ${analysis.company_name || 'Company not specified'}
Compatibility Score: ${analysis.compatibility_score}%
Date: ${new Date(analysis.created_at).toLocaleDateString()}

EXECUTIVE SUMMARY
================
${analysis.executive_summary}

STRENGTHS
=========
${analysis.strengths.map((strength, index) => `${index + 1}. ${strength}`).join('\n')}

AREAS FOR IMPROVEMENT
====================
${analysis.weaknesses.map((weakness, index) => `${index + 1}. ${weakness}`).join('\n')}

RECOMMENDATIONS
===============
${analysis.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}

Generated by TuneMyCV
    `.trim();

    // Create and download text file
    const blob = new Blob([analysisContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `CV_Analysis_${analysis.job_title?.replace(/[^a-zA-Z0-9]/g, '_') || 'Report'}_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-white border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow hover:border-zapier-orange/50">
      <div className="flex justify-between items-start">
        <div className="flex-1">
          <div className="flex items-center space-x-3 mb-2">
            <h3 className="text-lg font-medium text-gray-900">
              {analysis.job_title || 'Untitled Position'}
            </h3>
            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
              {analysis.compatibility_score}% match
            </span>
          </div>
          
          <div className="flex items-center text-sm text-gray-600 mb-3">
            <Building className="h-4 w-4 mr-1" />
            <span>{analysis.company_name || 'Company not specified'}</span>
            <span className="mx-2">â€¢</span>
            <Calendar className="h-4 w-4 mr-1" />
            <span>{new Date(analysis.created_at).toLocaleDateString()}</span>
          </div>
        </div>
        
        <div className="flex items-center space-x-3">
          <button
            onClick={handleDownload}
            className="flex items-center px-3 py-2 text-sm text-gray-600 hover:text-zapier-orange hover:bg-zapier-orange/10 rounded-md transition-colors"
          >
            <Download className="h-4 w-4 mr-1" />
            Download
          </button>
          <button
            onClick={handleCoverLetter}
            className="flex items-center px-3 py-2 text-sm text-blue-600 hover:text-zapier-orange hover:bg-zapier-orange/10 rounded-md transition-colors"
          >
            <FileText className="h-4 w-4 mr-1" />
            Cover Letter
          </button>
          <button
            onClick={handleInterviewPrep}
            className="flex items-center px-3 py-2 text-sm text-green-600 hover:text-zapier-orange hover:bg-zapier-orange/10 rounded-md transition-colors"
          >
            <MessageSquare className="h-4 w-4 mr-1" />
            Interview Prep
          </button>
          <button
            onClick={handleView}
            className="flex items-center text-sm text-gray-600 hover:text-zapier-orange transition-colors"
          >
            <Eye className="h-4 w-4 mr-1" />
            View
          </button>
          <button
            onClick={handleDelete}
            className="text-sm text-red-600 hover:text-zapier-orange transition-colors"
          >
            <Trash2 className="h-4 w-4" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default AnalysisListItem;
