
import React from 'react';
import DownloadOptions from '@/components/cover-letter/DownloadOptions';

interface AnalysisResult {
  id: string;
  job_title: string;
  company_name: string;
  compatibility_score: number;
  created_at: string;
  executive_summary: string;
  strengths: string[];
  weaknesses: string[];
  recommendations: string[];
}

interface AnalysisDetailModalProps {
  analysis: AnalysisResult | null;
  onClose: () => void;
}

const AnalysisDetailModal: React.FC<AnalysisDetailModalProps> = ({ analysis, onClose }) => {
  if (!analysis) return null;

  // Generate the full report content for download
  const generateReportContent = () => {
    let content = `CV COMPATIBILITY ANALYSIS REPORT\n\n`;
    
    content += `POSITION DETAILS\n`;
    if (analysis.job_title) content += `Job Title: ${analysis.job_title}\n`;
    if (analysis.company_name && analysis.company_name !== 'Company') {
      content += `Company: ${analysis.company_name}\n`;
    }
    content += `Analysis Date: ${new Date(analysis.created_at).toLocaleDateString()}\n\n`;
    
    content += `COMPATIBILITY SCORE: ${analysis.compatibility_score}%\n\n`;
    
    if (analysis.executive_summary) {
      content += `EXECUTIVE SUMMARY\n${analysis.executive_summary}\n\n`;
    }
    
    if (analysis.strengths && analysis.strengths.length > 0) {
      content += `STRENGTHS\n`;
      analysis.strengths.forEach((strength, index) => {
        content += `${index + 1}. ${strength}\n`;
      });
      content += `\n`;
    }
    
    if (analysis.weaknesses && analysis.weaknesses.length > 0) {
      content += `AREAS FOR IMPROVEMENT\n`;
      analysis.weaknesses.forEach((weakness, index) => {
        content += `${index + 1}. ${weakness}\n`;
      });
      content += `\n`;
    }
    
    if (analysis.recommendations && analysis.recommendations.length > 0) {
      content += `RECOMMENDATIONS\n`;
      analysis.recommendations.forEach((rec, index) => {
        content += `${index + 1}. ${rec}\n`;
      });
    }
    
    content += `\nGenerated by TuneMyCV.com`;
    
    return content;
  };

  const fileName = `CV_Analysis_Report_${analysis.job_title || 'Report'}_${new Date().toISOString().split('T')[0]}`;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center p-6 border-b">
          <h2 className="text-xl font-semibold text-gray-900">Analysis Details</h2>
          <div className="flex items-center space-x-2">
            <DownloadOptions
              content={generateReportContent()}
              fileName={fileName}
            />
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600"
            >
              <span className="sr-only">Close</span>
              âœ•
            </button>
          </div>
        </div>
        
        <div className="p-6 space-y-6">
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              {analysis.job_title || 'Untitled Position'}
            </h3>
            <p className="text-gray-600">{analysis.company_name || 'Company not specified'}</p>
            <p className="text-sm text-gray-500">
              Analyzed on {new Date(analysis.created_at).toLocaleDateString()}
            </p>
          </div>

          <div>
            <h4 className="font-medium text-gray-900 mb-2">Compatibility Score</h4>
            <div className="flex items-center">
              <div className="flex-1 bg-gray-200 rounded-full h-2 mr-4">
                <div 
                  className="bg-green-500 h-2 rounded-full" 
                  style={{ width: `${analysis.compatibility_score}%` }}
                ></div>
              </div>
              <span className="text-lg font-semibold text-gray-900">
                {analysis.compatibility_score}%
              </span>
            </div>
          </div>

          {analysis.executive_summary && (
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Executive Summary</h4>
              <p className="text-gray-700">{analysis.executive_summary}</p>
            </div>
          )}

          {analysis.strengths && analysis.strengths.length > 0 && (
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Strengths</h4>
              <ul className="list-disc list-inside space-y-1 text-gray-700">
                {analysis.strengths.map((strength, index) => (
                  <li key={index}>{strength}</li>
                ))}
              </ul>
            </div>
          )}

          {analysis.weaknesses && analysis.weaknesses.length > 0 && (
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Areas for Improvement</h4>
              <ul className="list-disc list-inside space-y-1 text-gray-700">
                {analysis.weaknesses.map((weakness, index) => (
                  <li key={index}>{weakness}</li>
                ))}
              </ul>
            </div>
          )}

          {analysis.recommendations && analysis.recommendations.length > 0 && (
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Recommendations</h4>
              <ul className="list-disc list-inside space-y-1 text-gray-700">
                {analysis.recommendations.map((recommendation, index) => (
                  <li key={index}>{recommendation}</li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default AnalysisDetailModal;
