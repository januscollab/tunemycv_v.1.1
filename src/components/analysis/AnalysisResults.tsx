
import React from 'react';
import { Star, AlertCircle, CheckCircle, TrendingUp } from 'lucide-react';
import AnalysisHeader from './AnalysisHeader';
import ScoreCard from './ScoreCard';
import KeywordAnalysis from './KeywordAnalysis';
import jsPDF from 'jspdf';

interface AnalysisResultsProps {
  result: any;
  onStartNew: () => void;
}

const AnalysisResults: React.FC<AnalysisResultsProps> = ({ result, onStartNew }) => {
  const downloadPDF = () => {
    const doc = new jsPDF();
    
    // Set up the document
    doc.setFontSize(20);
    doc.text('CV COMPATIBILITY ANALYSIS REPORT', 20, 30);
    
    doc.setFontSize(12);
    doc.text(`Job Title: ${result.job_title || 'Not specified'}`, 20, 50);
    doc.text(`Company: ${result.company_name || 'Not specified'}`, 20, 60);
    doc.text(`Analysis Date: ${new Date(result.created_at).toLocaleDateString()}`, 20, 70);
    
    doc.setFontSize(16);
    doc.text(`COMPATIBILITY SCORE: ${result.compatibility_score}%`, 20, 90);
    
    doc.setFontSize(14);
    doc.text('EXECUTIVE SUMMARY:', 20, 110);
    doc.setFontSize(10);
    const summaryLines = doc.splitTextToSize(result.executive_summary || 'No summary available', 170);
    doc.text(summaryLines, 20, 120);
    
    let yPosition = 120 + (summaryLines.length * 5) + 10;
    
    // Add sections with better spacing
    const addSection = (title: string, items: string[], startY: number) => {
      if (startY > 250) {
        doc.addPage();
        startY = 30;
      }
      
      doc.setFontSize(12);
      doc.text(title, 20, startY);
      doc.setFontSize(10);
      
      if (items && items.length > 0) {
        items.forEach((item, index) => {
          const lines = doc.splitTextToSize(`${index + 1}. ${item}`, 170);
          doc.text(lines, 20, startY + 10 + (index * 15));
        });
        return startY + 10 + (items.length * 15) + 10;
      } else {
        doc.text('None identified', 20, startY + 10);
        return startY + 25;
      }
    };
    
    yPosition = addSection('STRENGTHS:', result.strengths, yPosition);
    yPosition = addSection('AREAS FOR IMPROVEMENT:', result.weaknesses, yPosition);
    yPosition = addSection('RECOMMENDATIONS:', result.recommendations, yPosition);
    
    // Keywords section
    if (yPosition > 230) {
      doc.addPage();
      yPosition = 30;
    }
    
    doc.setFontSize(12);
    doc.text('KEYWORDS FOUND:', 20, yPosition);
    doc.setFontSize(10);
    doc.text(result.keywords_found?.join(', ') || 'No keywords found', 20, yPosition + 10);
    
    yPosition += 30;
    doc.setFontSize(12);
    doc.text('MISSING KEYWORDS:', 20, yPosition);
    doc.setFontSize(10);
    doc.text(result.keywords_missing?.join(', ') || 'No missing keywords identified', 20, yPosition + 10);
    
    // Footer
    yPosition = 280;
    doc.setFontSize(8);
    doc.text('Generated by TuneMyCV.com', 20, yPosition);
    
    // Download the PDF
    doc.save(`CV_Analysis_Report_${result.job_title || 'Report'}_${new Date().toISOString().split('T')[0]}.pdf`);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-apple-core/20 via-white to-citrus/10 dark:from-blueberry/10 dark:via-gray-900 dark:to-citrus/5">
      <div className="max-w-4xl mx-auto px-4 py-8">
        <AnalysisHeader onStartNew={onStartNew} onDownload={downloadPDF} />
        
        <ScoreCard 
          score={result.compatibility_score}
          jobTitle={result.job_title}
          companyName={result.company_name}
        />

        <div className="grid md:grid-cols-2 gap-6 mb-8">
          {/* Executive Summary */}
          <div className="bg-white dark:bg-blueberry/20 rounded-lg shadow p-6 border border-apple-core/20 dark:border-citrus/20">
            <div className="flex items-center mb-4">
              <Star className="h-5 w-5 text-apricot mr-2" />
              <h2 className="text-xl font-semibold text-blueberry dark:text-citrus">Executive Summary</h2>
            </div>
            <p className="text-blueberry/80 dark:text-apple-core">{result.executive_summary}</p>
          </div>

          {/* Quick Stats */}
          <div className="bg-white dark:bg-blueberry/20 rounded-lg shadow p-6 border border-apple-core/20 dark:border-citrus/20">
            <h2 className="text-xl font-semibold text-blueberry dark:text-citrus mb-4">Quick Stats</h2>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-blueberry/70 dark:text-apple-core/80">Keywords Found:</span>
                <span className="font-semibold text-green-600">{result.keywords_found?.length || 0}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-blueberry/70 dark:text-apple-core/80">Keywords Missing:</span>
                <span className="font-semibold text-red-600">{result.keywords_missing?.length || 0}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-blueberry/70 dark:text-apple-core/80">Analysis Date:</span>
                <span className="font-semibold text-blueberry dark:text-citrus">{new Date(result.created_at).toLocaleDateString()}</span>
              </div>
            </div>
          </div>
        </div>

        {/* Strengths and Weaknesses */}
        <div className="grid md:grid-cols-2 gap-6 mb-8">
          <div className="bg-white dark:bg-blueberry/20 rounded-lg shadow p-6 border border-apple-core/20 dark:border-citrus/20">
            <div className="flex items-center mb-4">
              <CheckCircle className="h-5 w-5 text-green-600 mr-2" />
              <h2 className="text-xl font-semibold text-blueberry dark:text-citrus">Strengths</h2>
            </div>
            {result.strengths && result.strengths.length > 0 ? (
              <ul className="space-y-2">
                {result.strengths.map((strength: string, index: number) => (
                  <li key={index} className="flex items-start">
                    <div className="w-2 h-2 bg-green-500 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                    <span className="text-blueberry/80 dark:text-apple-core">{strength}</span>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-blueberry/60 dark:text-apple-core/60">No specific strengths identified.</p>
            )}
          </div>

          <div className="bg-white dark:bg-blueberry/20 rounded-lg shadow p-6 border border-apple-core/20 dark:border-citrus/20">
            <div className="flex items-center mb-4">
              <AlertCircle className="h-5 w-5 text-yellow-600 mr-2" />
              <h2 className="text-xl font-semibold text-blueberry dark:text-citrus">Areas for Improvement</h2>
            </div>
            {result.weaknesses && result.weaknesses.length > 0 ? (
              <ul className="space-y-2">
                {result.weaknesses.map((weakness: string, index: number) => (
                  <li key={index} className="flex items-start">
                    <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                    <span className="text-blueberry/80 dark:text-apple-core">{weakness}</span>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-blueberry/60 dark:text-apple-core/60">No specific areas for improvement identified.</p>
            )}
          </div>
        </div>

        <KeywordAnalysis 
          keywordsFound={result.keywords_found}
          keywordsMissing={result.keywords_missing}
        />

        {/* Recommendations */}
        <div className="bg-white dark:bg-blueberry/20 rounded-lg shadow p-6 mb-8 border border-apple-core/20 dark:border-citrus/20">
          <div className="flex items-center mb-4">
            <TrendingUp className="h-5 w-5 text-apricot mr-2" />
            <h2 className="text-xl font-semibold text-blueberry dark:text-citrus">Recommendations</h2>
          </div>
          {result.recommendations && result.recommendations.length > 0 ? (
            <ul className="space-y-3">
              {result.recommendations.map((recommendation: string, index: number) => (
                <li key={index} className="flex items-start">
                  <div className="w-6 h-6 bg-apricot/20 text-apricot rounded-full flex items-center justify-center text-sm font-semibold mr-3 mt-0.5 flex-shrink-0">
                    {index + 1}
                  </div>
                  <span className="text-blueberry/80 dark:text-apple-core">{recommendation}</span>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-blueberry/60 dark:text-apple-core/60">No specific recommendations available.</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default AnalysisResults;
